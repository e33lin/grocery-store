class RecommendationsController < ApplicationController

    def stores
        $n_stores = params[:n_stores] 
        redirect_to recommendations_path
    end
    

    def show
        session_id = session[:current_user_id]

        # check if there is already an entry in Recommendations for the current user
        # if not, then we will save the recommendations generated by search_v3.py to Recommendations table
        if (Recommendation.find_by(list_id: session_id).blank?)
            require 'json'
            list_objects = List.where(list_id: session_id)
            list = List.list_as_array(list_objects)
            quantities = List.item_quantities_as_array(list_objects)
            n_stores = $n_stores

            result = `python3 -W ignore #{ENV["PWD"] + "/backend/search_v3.py"} '#{list}' #{n_stores}` # pass l as an argument 
            print result
            hash = JSON.parse(result, { allow_nan: true }) # turn string result into a hash
            $stores = [hash['1']['store'], hash['2']['store'], hash['3']['store']]

            store = ""
            subtotal = ""
            $subtotals = []
            results = ""
            $last_data_refresh = []
            $unknown = []

            hash.each do |rank, rec_data|
                $products = []
                $list = []
                rec_data.each do |key, value|
                    if (key == "store")
                        store = value
                    elsif (key == "subtotal")
                        subtotal = value
                    else
                        results = value
                    end
                end
                a=0
                results.each do |key, value|
                    $unknown[a] = []
                    if (key == "price")
                        prices = value
                        i = 0
                        for x in quantities
                            if (x > 1) # if the quantity of an item is > 1
                                item_price = prices[i] # grab the per unit price
                                additional_item_price = item_price * (x-1) # multiply by x-1. if x = 2, additional_item_price is the same as item_price
                                subtotal += additional_item_price # tack on the additional_item_price to subtotal
                            end
                            i += 1
                        end
                    elsif (key == "data_last_refreshed_at")
                        $last_data_refresh = value
                        
                    elsif (key == "full_product_text")
                        $products = value
                        for y in 0..$products.length()-1 
                            if ($products[y].nil?)
                                $unknown[a].push($list[y]) 
                                print $unknown[a]
                            end
                        end
                    elsif (key == "list_item")
                        $list = value
                    end
                    a+= 1
                end
                subtotal = subtotal.round(2)
                $subtotals.append(subtotal)
                Recommendation.create(list_id: session_id, rec_num:rank, store:store, subtotal:subtotal, rec:results)
            end

            

        # if there is an entry in Recommendations for the current user,
        # then we will query for it in Recommendations table and simply show these   
        else
            first_rec = Recommendation.find_by(list_id: session_id, rec_num: 1)
            second_rec = Recommendation.find_by(list_id: session_id, rec_num: 2)
            third_rec = Recommendation.find_by(list_id: session_id, rec_num: 3)

            $subtotals = [first_rec.subtotal, second_rec.subtotal, third_rec.subtotal]
            $stores = [first_rec.store, second_rec.store, third_rec.store]
        end
    end

    def number
        session_id = session[:current_user_id]
        list_objects = List.where(list_id: session_id)
        $list_items = List.list_as_array(list_objects)
        $quantities = List.item_quantities_as_array(list_objects)
        $current_recommendation = Recommendation.find_by(list_id: session_id, rec_num: params[:id])
        $list = []
        $products = []
        $prices = []
        $is_sale = []
        $stores = []
        $sale_dates = []
        $last_data_refresh = []
        $current_recommendation.rec.each do |key, value| # parses all the information, used as-is for 1 store view
            if (key == "full_product_text")
                $products = value
            elsif (key == "price")
                $prices = value
            elsif (key == "is_sale")
                $is_sale = value
            elsif (key == "list_item")
                $list = value
            elsif (key == "store")
                $stores = value
            elsif (key == "sale_valid_until")
                $sale_dates = value
            elsif (key == "data_last_refreshed_at")
                $last_data_refresh = value
            end
        end

        $first_store_products = []
        $second_store_products = []
        $first_store_prices = []
        $second_store_prices = []
        $first_store_is_sale = []
        $second_store_is_sale = []
        $first_store_sale_date = []
        $second_store_sale_date = []
        $first_store_quantities = []
        $second_store_quantities = []
        i = 0
        if ($current_recommendation.store.length() > 1)
            for store in $stores
                if (store == $current_recommendation.store[0])
                    print "hello"
                    $first_store_products.append($products[i])
                    $first_store_prices.append($prices[i])
                    $first_store_is_sale.append($is_sale[i])
                    $first_store_sale_date.append($sale_dates[i])
                    $first_store_quantities.append($quantities[i])
                else
                    $second_store_products.append($products[i])
                    $second_store_prices.append($prices[i])
                    $second_store_is_sale.append($is_sale[i])
                    $second_store_sale_date.append($sale_dates[i])
                    $second_store_quantities.append($quantities[i])
                end
                i += 1
            end
        end
    end
end